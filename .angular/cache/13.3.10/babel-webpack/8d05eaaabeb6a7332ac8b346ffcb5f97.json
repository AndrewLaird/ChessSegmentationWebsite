{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = [\"chessboard\"]; //import { Chess } from 'chess.js'\n\nexport let ChessBoardComponent = /*#__PURE__*/(() => {\n  class ChessBoardComponent {\n    constructor() {\n      this.fen = \"\";\n      let location = 'assets/img/';\n      const pieces_map = {\n        'p': location + 'bp.png',\n        'r': location + 'br.png',\n        'n': location + 'bn.png',\n        'b': location + 'bb.png',\n        'q': location + 'bq.png',\n        'k': location + 'bk.png',\n        'P': location + 'wp.png',\n        'R': location + 'wr.png',\n        'N': location + 'wn.png',\n        'B': location + 'wb.png',\n        'Q': location + 'wq.png',\n        'K': location + 'wk.png',\n        'background': location + 'chessboard.png'\n      };\n      this.num_to_piece = {\n        0: 'p',\n        1: 'r',\n        2: 'n',\n        3: 'b',\n        4: 'q',\n        5: 'k',\n        6: 'P',\n        7: 'R',\n        8: 'N',\n        9: 'B',\n        10: 'Q',\n        11: 'K'\n      };\n\n      const _this = this;\n\n      _this.num_loaded = 0;\n      _this.loaded_chess_pieces = {};\n      Object.keys(pieces_map).map(piece_name => {\n        const piece_location = pieces_map[piece_name];\n        let img = new Image();\n\n        img.onload = function () {\n          _this.loaded_chess_pieces[piece_name] = this;\n          _this.num_loaded += 1;\n\n          if (_this.fen != \"\" && _this.num_loaded == 13) {\n            _this.fen_to_board(_this.chessboard);\n          }\n        };\n\n        img.src = piece_location;\n      });\n      this.resolution = 1600;\n      this.piece_width = this.resolution / 8;\n      this.piece_height = this.resolution / 8;\n      this.pieces = Object.keys(pieces_map);\n    }\n\n    ngOnInit() {}\n\n    ngOnChanges() {\n      this.refresh_chessboard();\n    }\n\n    refresh_chessboard() {\n      if (this.chessboard) {\n        //let scale = this.resolution/1600;\n        if (!this.ctx) {\n          return;\n        } //this.ctx.setTransform(scale,0,0,scale,0,0);\n\n\n        this.piece_width = this.chessboard.nativeElement.height / 8;\n        this.piece_height = this.chessboard.nativeElement.height / 8;\n        this.fen_to_board(this.chessboard);\n      }\n    }\n\n    ngAfterViewInit() {\n      if (this.chessboard) {\n        // set the resolution (number of pixels)\n        this.chessboard.nativeElement.width = this.chessboard.nativeElement.height = 1600; // set the display size\n\n        this.chessboard.nativeElement.style.width = this.chessboard.nativeElement.style.height = \"300px\";\n        this.ctx = this.chessboard.nativeElement.getContext('2d');\n        this.refresh_chessboard();\n      }\n    }\n\n    draw_image(image, row, col, _ctx) {\n      let _this = this;\n\n      _ctx.drawImage(image, col * _this.piece_width, row * _this.piece_height, _this.piece_width, _this.piece_height);\n    }\n\n    iterate_over_fen_to_draw() {\n      if (!this.ctx) {\n        return;\n      }\n\n      const _ctx = this.ctx;\n\n      const _this = this;\n\n      this.fen.split('/').forEach(function (line, row) {\n        let line_items = line.split(\"\");\n        let col = 0;\n        line_items.forEach(function (item) {\n          if (_this.pieces.includes(item)) {\n            // this is a piece\n            // make a div right here\n            let img = _this.loaded_chess_pieces[item];\n\n            _this.draw_image(img, row, col, _ctx);\n\n            col += 1;\n          } else {\n            //convert to Number\n            col += +item;\n          }\n        });\n      });\n    }\n\n    fen_to_board(chessboard) {\n      if (!this.ctx) {\n        return;\n      }\n\n      let _ctx = this.ctx;\n\n      let _this = this;\n\n      if (this.num_loaded == 13) {\n        // draw one big image over the whole canvas\n        let background_image = _this.loaded_chess_pieces['background'];\n\n        _ctx.drawImage(background_image, 0, 0, chessboard.nativeElement.height, chessboard.nativeElement.height);\n\n        this.iterate_over_fen_to_draw();\n      }\n    }\n\n  }\n\n  ChessBoardComponent.ɵfac = function ChessBoardComponent_Factory(t) {\n    return new (t || ChessBoardComponent)();\n  };\n\n  ChessBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChessBoardComponent,\n    selectors: [[\"app-chess-board\"]],\n    viewQuery: function ChessBoardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chessboard = _t.first);\n      }\n    },\n    inputs: {\n      fen: \"fen\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chessboard\"], [\"chessboard\", \"\"]],\n    template: function ChessBoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0, 1);\n      }\n    },\n    styles: [\".chessboard[_ngcontent-%COMP%]{height:300px;background-repeat:no-repeat;background-size:cover}\"]\n  });\n  return ChessBoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}